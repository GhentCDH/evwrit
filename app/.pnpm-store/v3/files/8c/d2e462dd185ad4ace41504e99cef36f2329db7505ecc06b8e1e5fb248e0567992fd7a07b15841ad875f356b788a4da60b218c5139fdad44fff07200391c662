import { BatchArray } from './BatchArray';
import { IBatchArray } from './IBatchArray';
declare class _BubbleBatchArray<T> extends BatchArray<T> {
    private readonly minBatchSize;
    private readonly maxBatchSize;
    private readonly optimalSize;
    constructor(content: T[], maxBatchSize: number, minBatchSize?: number);
    filterInPlace(callbackFcn: (value: T, index: number, array: T[]) => any): void;
    concat(...items: IBatchArray<T>[]): BubbleBatchArray<T>;
    splice(begIdx: number, numRemoved: number, ...addedItems: T[]): T[];
    spliceAll(...splices: [number, number, ...T[]][]): void;
    private spliceNoBubble;
    private mergeSmallBatches;
    private splitLargeBatches;
    protected clone(): BubbleBatchArray<T>;
    pop(): T | undefined;
    push(...items: T[]): number;
    shift(): T | undefined;
    unshift(...items: T[]): number;
}
declare type BubbleBatchArray<T> = _BubbleBatchArray<T>;
declare function BubbleBatchArray<T>(content: T[], maxBatchSize: number, minBatchSize?: number): BubbleBatchArray<T>;
export { BubbleBatchArray as default };
